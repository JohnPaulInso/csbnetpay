document.addEventListener('DOMContentLoaded', () => {
    const prompt = document.getElementById('fullscreenPrompt');

    document.addEventListener('mousemove', () => {
        prompt.style.display = 'block';
    });

    prompt.addEventListener('click', () => {
        openFullscreen();
        prompt.style.display = 'none';
    });
});

function openFullscreen() {
    const elem = document.documentElement;
    if (elem.requestFullscreen) {
        elem.requestFullscreen();
    } else if (elem.mozRequestFullScreen) {
        elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) {
        elem.msRequestFullscreen();
    }
}

const csvFilesNetpay = [
    'dec25.csv', 'nov25.csv', 'oct25.csv', 'sep25.csv', 'aug25.csv', 'jul25.csv', 'jun25.csv', 'may25.csv', 
    'apr25.csv', 'mar25.csv', 'feb25.csv', 'jan25.csv', 'dec24.csv', 'nov24.csv', 'oct24.csv', 'sep24.csv', 
    'aug24.csv', 'jul24.csv', 'jun24.csv', 'may24.csv', 'apr24.csv', 'mar24.csv', 'feb24.csv'
];

document.getElementById('searchButtonNetpay').addEventListener('click', searchEmployeeNetpay);

async function searchEmployeeNetpay() {
    const searchInputNetpay = document.getElementById('searchInputNetpay').value.trim();
    const loadingIndicatorNetpay = document.getElementById('loadingIndicatorNetpay');
    const employeeInfoSectionNetpay = document.getElementById('employeeInfoNetpay');
    const resultsSectionNetpay = document.getElementById('resultsNetpay');

    if (!searchInputNetpay) {
        alert('Please enter an employee number.');
        return;
    }

    // Reset display
    resultsSectionNetpay.innerHTML = '';
    employeeInfoSectionNetpay.innerHTML = '';
    loadingIndicatorNetpay.style.display = 'block';

    // Filter available files
    const availableFiles = await filterExistingFiles(csvFilesNetpay);
    if (availableFiles.length === 0) {
        alert('No available files found.');
        loadingIndicatorNetpay.style.display = 'none';
        return;
    }

// Fetch all available CSV data
let fetchedDataNet = await Promise.all(availableFiles.map(fetchCSVNetpay));


    // Remove failed fetches
    fetchedDataNet = fetchedDataNet.filter(data => data !== null);
    
    // Sort from latest to oldest
    fetchedDataNet.sort((a, b) => b.date - a.date);

    if (fetchedDataNet.length > 0) {
        displayEmployeeInfoNetpay(fetchedDataNet[0].monthName, fetchedDataNet[0].csvData);
        displayResultsTableNetpay(fetchedDataNet);
    } else {
        employeeInfoSectionNetpay.innerHTML = 'No data available for the most recent month.';
    }

    loadingIndicatorNetpay.style.display = 'none';
}

async function filterExistingFiles(fileList) {
    const existingFiles = await Promise.all(fileList.map(async (file) => {
        try {
            const response = await fetch(file, { method: 'HEAD' });
            return response.ok ? file : null;
        } catch {
            return null;
        }
    }));

    return existingFiles.filter(file => file !== null);
}

async function fetchCSVNetpay(csvFile) {
    try {
        const response = await fetch(csvFile);
        if (!response.ok) throw new Error(`Unable to fetch ${csvFile}`);

        const text = await response.text();
        return {
            monthName: getMonthNameFromCsvNetpay(csvFile),
            csvData: parseCSVNetpay(text),
            date: getDateFromCsvNetpay(csvFile)
        };
    } catch (error) {
        console.error(`Error fetching data for ${csvFile}:`, error);
        return null;
    }
}

function getDateFromCsvNetpay(csvFile) {
    const monthMap = { 'jan': 0, 'feb': 1, 'mar': 2, 'apr': 3, 'may': 4, 'jun': 5, 'jul': 6, 'aug': 7, 'sep': 8, 'oct': 9, 'nov': 10, 'dec': 11 };
    const monthPart = csvFile.slice(0, 3);
    const yearPart = '20' + csvFile.slice(3, 5);
    return new Date(yearPart, monthMap[monthPart]);
}

function getMonthNameFromCsvNetpay(csvFile) {
    const monthMap = { 'jan': 'January', 'feb': 'February', 'mar': 'March', 'apr': 'April', 'may': 'May', 'jun': 'June', 'jul': 'July', 'aug': 'August', 'sep': 'September', 'oct': 'October', 'nov': 'November', 'dec': 'December' };
    const monthPart = csvFile.slice(0, 3);
    const yearPart = '20' + csvFile.slice(3, 5);
    return `${monthMap[monthPart]} ${yearPart}`;
}

function parseCSVNetpay(data) {
    return data.trim().split('\n').map(row => row.split(','));
}

function displayEmployeeInfoNetpay(monthName, csvData) {
    const employeeInfoSectionNetpay = document.getElementById('employeeInfoNetpay');
    const searchEmpNo = document.getElementById('searchInputNetpay').value.trim();
    let employeeFound = false;

    for (let i = 1; i < csvData.length; i++) {
        const row = csvData[i];
        if (row.length < 4) continue;
        const empno = row[3];

        if (empno === searchEmpNo) {
            employeeFound = true;
            employeeInfoSectionNetpay.innerHTML = `
                <strong>NAME:</strong><b style="color:orange"> ${row[4]} ${row[5]} ${row[6]}</b><br/>
                <strong>EMPNO:</strong><b style="color:orange"> ${empno} </b><br/>
                <strong>DIV / STA:</strong><b style="color:orange"> ${row[1]} / ${row[2]}</b><br/>
            `;
            break;
        }
    }

    if (!employeeFound) {
        employeeInfoSectionNetpay.innerHTML = 'No employee found in available data.';
    }
}

function displayResultsTableNetpay(fetchedDataNet) {
    const resultsSectionNetpay = document.getElementById('resultsNetpay');
    const searchEmpNo = document.getElementById('searchInputNetpay').value.trim();

    const table = document.createElement('table');
    table.classList.add('table', 'table-borderless', 'text-white');

    table.innerHTML = `
        <thead>
            <tr>
                <th class="font-weight-bold">MONTH</th>
                <th class="font-weight-bold">TAKEHOME</th>
            </tr>
        </thead>
        <tbody></tbody>
    `;

    const tbody = table.querySelector('tbody');

    fetchedDataNet.forEach(data => {
        data.csvData.forEach(row => {
            if (row.length < 4) return;

            const empno = row[3];
            if (empno === searchEmpNo) {
                const takehome = parseFloat(row[7]).toLocaleString('en-PH', { style: 'currency', currency: 'PHP' });

                const rowElement = document.createElement('tr');
                rowElement.innerHTML = `<td>${data.monthName}</td><td><b>${takehome}</b></td>`;
                tbody.appendChild(rowElement);
            }
        });
    });

    resultsSectionNetpay.appendChild(table);
}







        document.addEventListener("DOMContentLoaded", function() {
            const loginTime = localStorage.getItem("loginTime");

            // Check if the login time exists and if the session has expired (4 hours)
            if (!loginTime || (new Date().getTime() - loginTime) > 3 * 60 * 60 * 1000) {
                // Redirect to login page if no login session or session expired
                window.location.href = "login/index.html";
            }
        });

// Function to handle logout
function logout() {
    // Clear the login-related data from localStorage
    localStorage.removeItem("loginTime");
    localStorage.removeItem("employeeNumber"); // If you store employeeNumber or any other login info

    // Redirect to the login page
    window.location.href = "login/index.html";
}

// Check if logged in (this part remains unchanged from your original code)
document.addEventListener("DOMContentLoaded", function() {
    const loginTime = localStorage.getItem("loginTime");

    // Check if the login time exists and if the session has expired (4 hours)
    if (!loginTime || (new Date().getTime() - loginTime) > 3 * 60 * 60 * 1000) {
        // Redirect to login page if no login session or session expired
        window.location.href = "login/index.html";
    }
});




// Function to check if jonathan77 is logged in and show/hide the admin container
function checkLoggedInUser() {
    const loggedInUser = localStorage.getItem("loggedInUser");

    // Get the container element
    const adminContainer = document.querySelector(".container-admin");

    // Show the container only if jonathan77 is logged in
    if (loggedInUser === "jonathan77") {
        adminContainer.style.display = "block"; // Show the element
    } else {
        adminContainer.style.display = "none"; // Hide the element
    }
}

// Call this function on page load to check if jonathan77 is logged in
checkLoggedInUser();
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('service-worker.js');
    }